#!/usr/bin/env python
"""
Optimize a reaction path using the nudged elastic band algorithm. An electronic structure
method implemented in Gaussian 09/16 or Q-Chem is used to drive the calculation.

Nudged elastic band (NEB) method for finding minimum energy paths (MEP) and saddle points.
Implementation based on
     "Improved tangent estimate in the nudged elastic band method for finding minimum energy paths and saddle points" by Henkelman, G.; Jonsson, H. J.Chem.Phys. 113, 9978 (2000)
"""
from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from builtins import str
from builtins import zip
from builtins import range
from builtins import object

import argparse

from NEB import XYZ, utils, AtomicData
from NEB.calculators import get_calculator

from numpy import zeros, cos, sin, pi, linspace, array, dot, vstack, cumsum, argmin, frompyfunc, sign
import numpy as np
import numpy.linalg as la
from numpy.linalg import norm
from multiprocessing import Pool
import itertools

import os.path

# This is a wrapper function for making run_calculator compatible with Pool.map(...)
# The run_calculator() function has to be defined at the top level.
def run_calculator_map(args):
    atomlist, directory, kwds = args
    return run_calculator(atomlist, directory=directory, **kwds)


class BFGS(object):
    def __init__(self, natoms, maxstep=None, alpha=None):
        """BFGS optimizer.

        Parameters:

        natoms: int
            Number of atoms

        maxstep: float
            Used to set the maximum distance an atom can move per
            iteration (default value is 0.2 Å).

        alpha: float
            Initial guess for the Hessian (curvature of energy surface). A
            conservative value of 70.0 is the default, but number of needed
            steps to converge might be less if a lower value is used. However,
            a lower value also means risk of instability.
        """
        bohr_to_angs = 0.529177249

        if maxstep is None:
            self.maxstep = 0.2 / bohr_to_angs
        else:
            self.maxstep = maxstep / bohr_to_angs

        if self.maxstep > 1.0:
            print('You are using a *very* large value for '
                          'the maximum step size: %.1f Å' % maxstep)

        if alpha is None:
            self.alpha = 70.0
        else:
            self.alpha = alpha

        # initial hessian
        self.H0 = np.eye(3 * natoms) * self.alpha
        self.H = None
        self.r0 = None
        self.f0 = None
        return None

    def step(self, r, f):
        """
        Do the optimization step

        Parameters:
        atoms: Atoms object
            The Atoms object to relax.

        r: np.ndarray
            Cartesian coordinates as numpy array with shape Natoms x 3

        f: np.ndarray
            Cartesian forces as numpy array with shape Natoms x 3
        """
        f = f.reshape(-1)
        self.update(r.flat, f, self.r0, self.f0)
        omega, V = np.linalg.eigh(self.H)

        dr = np.dot(V, np.dot(f, V) / np.fabs(omega)).reshape((-1, 3))
        steplengths = (dr**2).sum(1)**0.5
        dr = self.determine_step(dr.flat, steplengths)
        self.r0 = r.flat.copy()
        self.f0 = f.copy()
        # Return the updated geometry
        return r + dr

    def determine_step(self, dr, steplengths):
        """Determine step to take according to maxstep

        Normalize all steps as the largest step. This way
        we still move along the eigendirection.
        """
        maxsteplength = np.max(steplengths)
        if maxsteplength >= self.maxstep:
            scale = self.maxstep / maxsteplength
            dr *= scale
        return dr

    def update(self, r, f, r0, f0):
        if self.H is None:
            self.H = self.H0
            return
        dr = r - r0

        if np.abs(dr).max() < 1e-7:
            # Same configuration again (maybe a restart):
            return

        df = f - f0
        a = np.dot(dr, df)
        dg = np.dot(self.H, dr)
        b = np.dot(dr, dg)
        self.H -= np.outer(df, df) / a + np.outer(dg, dg) / b
        return None


class NEB(object):
    def __init__(self, force_constant=1.0, force_constant_surface_switch=5.0, mass=1.0,
                 procs_per_image=1, parallel_images=1,
                 mem_per_image="6Gb",
                 scratch_dir="/scratch",
                 calculator="g16",
                 print_every=1):
        """
        Parameters
        ==========
        print_every: write path and energies for every N-th optimization step
        """
        self.force_constant = 1.0
        self.force_constant_surface_switch = force_constant_surface_switch
        self.mass = 1.0
        # parallelization
        self.procs_per_image = procs_per_image
        self.parallel_images = parallel_images
        # memory per job
        self.mem_per_image = mem_per_image

        self.scratch_dir = os.path.expandvars(scratch_dir)
        print("Subfolders for images will be created in the scratch directory '%s'" % self.scratch_dir)
        print("Calculator is '%s'" % calculator)

        # run_calculator() has to be defined as a global variable so that it can be pickled
        global run_calculator
        run_calculator = get_calculator(calculator)

        self.print_every = print_every

        self.V = []
        self.istep = 0
    def setGeometry(self, atomlist):
        """
        Parameters:
        ===========
        atomlist    :  list of tuples (Zat,[x,y,z]) with atomic number and cartesian
                       coordinates in bohr for each atom
        """
        self.atomlist = atomlist
    def setName(self, name):
        """name is appended to the output files"""
        self.name = name
    def setImages(self, images, states):
        """
        Parameters:
        ===========
        images: list of numpy arrays with the coordinates of each image. If no intermediate states
           along the reaction coordinate are known, this has to be at least [initial_position, final_positions]
        states: list of indeces indicating on which electronic state the images reside
        """
        #self.R = [array(img) for img in images] # make sure we have numpy arrays
        self.R = images # vectors of atom positions
        self.states = states
    def addImagesLinearly(self, nimg=10):
        """
        between segments interpolate linearly. Add nimg additional images
        to each segments. If there are initially only two segments, the products
        and the educts, this creates a path of lengths nimg+2.
        """
        path = []
        st = []
        for i,Ri in enumerate(self.R[:-1]):
            for j,a in enumerate(linspace(0.0, 1.0, nimg)):
                Rinterp = (1.0-a)*self.R[i] + a*self.R[i+1]
                #
                if j < nimg/2.0:
                    st.append( self.states[i] )
                else:
                    st.append( self.states[i+1] )
                if j < nimg-1: # do not append the last image
                    path.append(Rinterp)
        path.append(self.R[-1])
        st.append(self.states[-1])
        print("initial guess for path contains %s images" % len(path))
        self.R = path
        self.states = st
    def _getPES(self):
        """calculate energies and gradients at the image positions"""
        self.V = [None for Ri in self.R]  # potential energies of each image
        self.F = [None for Ri in self.R]  # true forces acting on each image

        # additional keywords controlling electronic structure calculation
        kwds = { "nprocs" : self.procs_per_image,
                 "mem": self.mem_per_image }

        if self.parallel_images > 1:
            # parallelize over images
            atomlists = [XYZ.vector2atomlist(x, self.atomlist) for x in self.R]
            image_dirs = ["IMAGE_%2.2d" % i for i in range(0, len(self.R))]
            image_dirs = [os.path.join(self.scratch_dir, d) for d in image_dirs]
            pool = Pool(self.parallel_images)
            results = pool.map(run_calculator_map, list(zip(atomlists, image_dirs, itertools.repeat(kwds, len(self.R)))))
            for i,(en,grad) in enumerate(results):
                print("image %4.1d   energy= %+e   |grad|= %e" % (i,en, la.norm(grad)))
                self.V[i] = en
                self.F[i] = -grad
        else:
            # sequential implementation
            for i,Ri in enumerate(self.R):
                atomlist = XYZ.vector2atomlist(Ri, self.atomlist)
                image_dir = os.path.join(self.scratch_dir, "IMAGE_%2.2d" % i)
                en, grad = run_calculator(atomlist, directory=image_dir, **kwds)
                self.V[i] = en
                self.F[i] = - grad
                print("image %4.1d   energy= %+e   |grad|= %e" % (i,en, la.norm(grad)))
    def _getTangents(self):
        """tangents along the path at the image positions"""
        self.tangents = [None for Ri in self.R]
        for i in range(1,len(self.R)-1):
            if self.V[i-1] <= self.V[i] <= self.V[i+1]:
                self.tangents[i] = self.R[i+1] - self.R[i]
            elif self.V[i+1] < self.V[i] < self.V[i-1]:
                self.tangents[i] = self.R[i] - self.R[i-1]
            else:
                dVmax = max(abs(self.V[i+1] - self.V[i]),abs(self.V[i-1] - self.V[i]))
                dVmin = min(abs(self.V[i+1] - self.V[i]),abs(self.V[i-1] - self.V[i]))
                taup = self.R[i+1] - self.R[i]
                taum = self.R[i] - self.R[i-1]
                if self.V[i+1] > self.V[i-1]:
                    self.tangents[i] = taup*dVmax + taum*dVmin
                elif self.V[i+1] < self.V[i-1]:
                    self.tangents[i] = taup*dVmin + taum*dVmax
                else:
                    self.tangents[i] = self.R[i+1] - self.R[i-1] # ?
            # normalize tangents
            self.tangents[i] /= norm(self.tangents[i])

    def _getEffectiveForces(self):
        # effective total force
        self.effF = [None for Ri in self.R]
        for i in range(1,len(self.R)-1):
            # spring force parallel to tangents
            km = self.force_constant
            if self.states[i+1] != self.states[i]:
                kp = self.force_constant_surface_switch
                dR = self.R[i+1] - self.R[i]
                dE = self.V[i+1] - self.V[i]
                dF = self.F[i+1] - self.F[i]

                F1 = dR + (dE - np.dot(self.F[i+1], dR)) * self.F[i+1]
                F2   = -dR + (-dE + np.dot(self.F[i], dR)) * self.F[i]
                print("dE = %s" % dE)
                print("erf(dE) = %s" % special.erf(dE))
                print("Fi+1 = %s" % self.F[i+1])
                print("Fi   = %s" % self.F[i])
                Fspring = kp * (F1 + F2)
                print("Fspring = %s" % Fspring)
            else:
                kp = self.force_constant
                Fspring = kp * norm(self.R[i+1] - self.R[i]) * self.tangents[i] # new implementation by Henkelman/Jonsson

            if self.states[i] != self.states[i-1]:
                km = self.force_constant_surface_switch
                Fspring -= dot(km*(self.R[i] - self.R[i-1]), self.tangents[i]) * self.tangents[i] # from original implementation of NEB
            else:
                km = self.force_constant
                Fspring -= km*norm(self.R[i] - self.R[i-1]) * self.tangents[i] # new implementation by Henkelman/Jonsson
            #Fspring = dot(self.force_constant*((self.R[i+1] - self.R[i]) - (self.R[i] - self.R[i-1])), self.tangents[i]) * self.tangents[i] # from original implementation of NEB
            # perpendicular component of true forces
            Fnudge = self.F[i] - dot(self.F[i],self.tangents[i])*self.tangents[i]
            self.effF[i] = Fspring + Fnudge
        if self.optimize_endpoints == True:
            # initial and final weights move toward minima
            self.effF[0] = self.F[0]
            self.effF[-1] = self.F[-1]
        else:
            # supress force on ends so that they stay put
            self.effF[0] = zeros(self.F[0].shape)
            self.effF[-1] = zeros(self.F[-1].shape)

    def _converged(self, tolerance):
        """Check if average forces have dropped below certain threshold"""
        self.avgForce = 0.0
        for i in range(1,len(self.R)-1):
            self.avgForce += norm(self.effF[i])
        if self.optimize_endpoints == True:
            # force on enpoints should only add to the convergence measure
            # is they can be optimized
            self.avgForce += norm(self.effF[0])
            self.avgForce += norm(self.effF[-1])
        self.avgForce /= len(self.R)
        print("average force = %2.5f (tolerance = %2.5f)" % (self.avgForce, tolerance))
        if self.avgForce < tolerance:
            return True
        else:
            return False

    def findMEP(self, tolerance=0.001, nsteps=1000, dt=0.01, friction=0.05,
                integrator="verlet", optimize_endpoints=True, maxstep=0.1,
                alpha=70):
        """
        find minimum energy path by allowing the band to move with some friction to
        damp out oscillations. After the optimization the optimally distributed images
        can be retrieved with .getImages().

        Parameters:
        ===========
        tolerance: If the average force on the band drops below this value, the optimization is stopped
        nsteps: run damped dynamics for nsteps.
        dt: time step
        friction: damping coefficient between 0.0 (no damping) and 1.0 (do not use such high damping)
        integrator: algorithm to minimize each geometry
        optimize_endpoints: if True, end points of band move towards energy minima.
        """
        self.optimize_endpoints = optimize_endpoints
        if integrator== "bfgs":
            natoms = int(len(self.R[0]) / 3)
            optimizer = BFGS(natoms, maxstep, alpha)
        Rlast = [Ri for Ri in self.R] # R(t-dt), R[0] and R[-1] stay always the same
        Rnext = [Ri for Ri in self.R] # R(t+dt)
        for self.istep in range(0, nsteps):
            self._getPES()
            self._getTangents()
            self._getEffectiveForces()
            # optimized positions of intermediate images
            # and minimize positions of ends
            for i in range(0, len(self.R)):
                if i in [0, len(self.R)-1] and (self.optimize_endpoints == False):
                    # as effF[0] = 0 and effF[-1] = 0 this line should not be neccessary ????
                    continue
                if integrator== "verlet":
                    if self.istep == 0:
                        # Euler step, without initial velocity
                        Rnext[i] = self.R[i] + 0.5*self.effF[i]/self.mass*pow(dt,2)
                        Rlast[i] = self.R[i]
                        self.R[i] = Rnext[i]
                    else:
                        # damped Verlet algorithm
                        Rnext[i] = (2.0-friction)*self.R[i] - (1.0-friction)*Rlast[i] + self.effF[i]/self.mass*pow(dt,2)
                        Rlast[i] = self.R[i]
                        self.R[i] = Rnext[i]
                elif integrator == "bfgs":
                    # BFGS step
                    Rnext[i] = optimizer.step(self.R[i], self.effF[i])
                    Rlast[i] = self.R[i]
                    self.R[i] = Rnext[i]

            if self._converged(tolerance):
                break
            self._writeIteration()
            self.plot()
        #
        else:
            raise Warning("Could not find minimum energy path in %s iterations (average force = %2.5f > tolerance = %2.5f)." % (self.istep+1, self.avgForce, tolerance))
    def _writeIteration(self):
        import sys
        print("Iteration = %s  " % self.istep)
        sys.stdout.flush()
    def plot(self):
        images = self.getImages()
        energies = self.V
        if self.istep % self.print_every == 0:
            geometries = [XYZ.vector2atomlist(im, self.atomlist) for im in images]
            xyz_out = "neb_%s_%4.4d.xyz" % (self.name, self.istep)
            energy_titles = ["Energy="+str(energy) for energy in energies]
            XYZ.write_xyz(xyz_out, geometries, title=energy_titles)
            print("wrote path for iteration %d to %s" % (self.istep, xyz_out))
            if energies != []:
                # first column: index of image
                # second column: energy of image
                data = np.vstack((np.arange(0, len(images)), energies)).transpose()
                np.savetxt("path_energies_%s_%4.4d.dat" % (self.name, self.istep), data)

    def getImages(self):
        return self.R
    def getImageStates(self):
        return self.states
    def splineMEProfile(self):
        """
        interpolate the energy along MEP between images with a cubic spline.

        Returns:
        ========
        me: callable function, that returns the energy as a function of the reaction coordinate
          which runs from 0 (educts) to 1 (product)
        """
        n = len(self.R)
        x = zeros(n)
        f = zeros(n)
        f1 = zeros(n) # first derivative of f
        for i in range(0,n):
            if i == 0:
                t = self.R[1] - self.R[0]
                x[i] = 0.0
            else:
                t = self.R[i] - self.R[i-1]
                x[i] = x[i-1] + norm(t)
            f[i] = self.V[i]
            f1[i] = dot(self.F[i], t/norm(t))
        def MEfunc(rxc):
            """
            potential energy along minimum energy path.

            Parameters:
            ===========
            rxc: reaction coordinate (between 0.0 and 1.0)
            """
            assert 0.0 <= rxc <= 1.0
            s = rxc*x[-1]
            ic = argmin(abs(x - s))
            if s < x[ic]:
                ic -= 1
            if s == x[ic]:
                return f[ic]
            dx = norm(x[ic+1]-x[ic])
            df = f[ic+1]-f[ic]
            a = (s-x[ic])/dx
            assert 0.0 <= a <= 1.0
            fa = (1-a)*f[ic] + a*f[ic+1] + a*(1-a)*((1-a)*(-f1[ic]*dx-df) + a*(+f1[ic+1]*dx + df))
            return fa
        return frompyfunc(MEfunc,1,1)

    def splineMEPath(self):
        """
        interpolate the minimum energy path with a cubic spline along the images.

        Returns:
        ========
        mep: callable function, that returns the geometry as a function of the reaction coordinate
          which runs from 0 (educts) to 1 (product)
        """
        n = len(self.R)
        x = zeros(n)
        images = self.getImages()
        gradients =  [-f for f in self.F]
        for i in range(0,n):
            if i == 0:
                t = self.R[1] - self.R[0]
                x[i] = 0.0
            else:
                t = self.R[i] - self.R[i-1]
                x[i] = x[i-1] + norm(t)
        def MEPfunc(rxc):
            """
            linearly interpolated geometries along the minimum energy path.

            Parameters:
            ===========
            rxc: reaction coordinate (between 0.0 and 1.0)
            """
            assert 0.0 <= rxc <= 1.0
            s = rxc*x[-1]
            ic = argmin(abs(x - s))
            if s < x[ic]:
                ic -= 1
            if s == x[ic]:
                return images[ic]
            dx = norm(x[ic+1]-x[ic])
            assert x[ic] <= s <= x[ic+1]
            a = (s-x[ic])/dx
            assert 0.0 <= a <= 1.0
            geom = (1-a)*images[ic] + a*images[ic+1]
            return geom
        return MEPfunc


if __name__ == "__main__":
    import sys
    from scipy import optimize
    from os.path import basename, exists

    usage = """
       Usage: optimize_neb.py  path.xyz

    Optimize a reaction path on the ground state using Gaussian 09/16 or Q-Chem.

    Input Files:
       path.xyz    -   xyz-file with educt, intermediates and product
       neb.gjf     -   Gaussian 09 input script driving the energy calculation (see below)

    Output Files:
       neb_####.xyz            -  current reaction path
       path_energies_####.dat  -  current energy profile

    The single argument should be an xyz-file containing initial guess
    geometries along the reaction path. This path will be optimized
    using the nudged elastic band (NEB) algorithm.

    In addition you have to set up a Gaussian input script called `neb.gjf`
    that computes the gradient and saves it in a checkpoint file called
    'grad.chk'. The geometry is updated via a file called `geom` that
    is imported at the end of the script.
    An example input script is given below:

    ------- example for neb.gjf ----------
    %%Chk=grad.chk
    %%Nproc=1
    %%Mem=1Gb
    # B3LYP/def2-SVP Force
      NoSymm SCF=QC

    s0 gradient

    0 3
    @geom


    --------------------------------------

    The NEB calculations are parallelized over the images. The number of images that are
    processed at the same time are specified by the option `parallel_images`.
    The calculation for each image can be run in parallel, as well. The %%Nproc=... line
    in the Gaussian job file should agree with the value provided in the option `procs_per_image`.

    Every N time steps the current path and the energy profile are written
    to `neb_####.xyz` and `path_energies_####.dat` where #### is replaced by the
    name of the input xyz-file and the time step.

    To see all options for controlling the NEB calculation, call this script
    with the --help option.
    """

    parser = argparse.ArgumentParser(prog="NEB", usage=usage)
    parser.add_argument("filename", type=str, default="path.xyz",
                      help="XYZ file containing geometries [default: path.xyz]")
    # options
    parser.add_argument("-i", "--procs_per_image", dest="procs_per_image", type=int, default=1,
                      help="Number of processors used in the calculation for a single image [default: 1]")
    parser.add_argument("-m", "--mem_per_image", dest="mem_per_image", type=str, default="6Gb",
                      help="Amount of memory to be allocated for each image calculation [default: 6Gb]")
    parser.add_argument("-p", "--parallel_images", dest="parallel_images", type=int, default=1,
                      help="How many images should be processed in parallel? Each image will be run with `procs_per_image` processors [default: 1]")
    parser.add_argument("-c", "--force_constant", dest="force_constant", type=float, default=1.0,
                      help="Force constant for strings connecting the beads on the elastic band [default: 1.0]")
    parser.add_argument("--mass",         dest="mass", type=float, default=1.0,
                      help="Mass of beads [default: 1.0]")
    parser.add_argument("-t", "--tolerance", dest="tolerance", type=float, default=0.02,
                      help="The optimization is finished, if the average force on the band drops below this value [default: 0.02]")
    parser.add_argument("-n", "--nsteps", dest="nsteps", type=int, default=1000,
                      help="Run damped dynamics for NSTEPS steps [default: 10000]")
    parser.add_argument("--dt",           dest="dt", type=float, default=0.1,
                      help="Time step for integrating damped dynamics [default: 0.1]")
    parser.add_argument("-f", "--friction", dest="friction", type=float, default=0.2,
                      help="damping coefficient between 0.0 (no damping) and 1.0 (do not use such high damping) [default: 0.2]")
    parser.add_argument("-e", "--optimize_endpoints", dest="optimize_endpoints", action="store_true",
                      help="Optimize the endpoints of the path as well [default: False]")
    parser.add_argument("-s", "--scratch_dir", dest="scratch_dir", type=str, default="/sscratch/$PBS_JOBID",
                      help="Path to scratch directory [default: /sscratch/$PBS_JOBID]")
    parser.add_argument("--print_every", dest="print_every", type=int, default=1,
                      help="Print current path and energies every N-th step [default: 1]")
    parser.add_argument("--integrator", dest="integrator", type=str, default="bfgs",
                      help="Choose the integrator for the optimization (verlet or bfgs) [default: bfgs]")
    parser.add_argument("--calculator", dest="calculator", type=str, default="g16",
                      help="Choose electronic structure program, 'g09' or 'g16' (Gaussian) or 'qchem'. If Qchem is chosen, an input file called 'neb.in' has to be present instead of 'neb.gjf' [default: g16]")

    args = parser.parse_args()

    """
    if len(args) < 1:
        #print(usage)
        exit(-1)
    """
    try:
        os.environ["SLURM_JOBID"]
    except KeyError:
        raise KeyError("This script can only be run through a SLURM queue, environment variable SLURM_JOBID not found!")

    if args.calculator == "g09" and not exists("neb.gjf"):
        print("ERROR: Gaussian input script 'neb.gjf' not found in current folder!")
        exit(-1)

    if args.calculator == "g16" and not exists("neb.gjf"):
        print("ERROR: Gaussian input script 'neb.gjf' not found in current folder!")
        exit(-1)

    if args.calculator == "qchem" and not exists("neb.in"):
        print("ERROR: QChem input script 'neb.in' not found in current folder!")
        exit(-1)

    if args.calculator == "bagel" and not exists("neb.json"):
        print("ERROR: BAGEL input script 'neb.json' not found in current folder!")
        exit(-1)

    print("""
    ****************************
    *                          *
    *  Nudged Elastic Band     *
    *                          *
    ****************************
    """)
    print(args)

    # path to xyz-file
    xyz_file = args.filename
    #
    name = basename(xyz_file.replace(".xyz", ""))
    # Read the geometry from the xyz-file
    atomlists = XYZ.read_xyz(xyz_file)
    atomlist = atomlists[0]

    neb = NEB(force_constant=args.force_constant, mass=args.mass,
              procs_per_image=args.procs_per_image, parallel_images=args.parallel_images,
              mem_per_image=args.mem_per_image,
              scratch_dir=args.scratch_dir,
              calculator=args.calculator,
              print_every=args.print_every)
    neb.setGeometry(atomlist)
    neb.setName(name)

    images = [XYZ.atomlist2vector(atomlist) for atomlist in atomlists]
    neb.setImages(images, states=[0 for im in images])
    neb.addImagesLinearly(2)
    # save initial path
    neb.plot()
    neb.findMEP(tolerance=args.tolerance, nsteps=args.nsteps, integrator=args.integrator,
                dt=args.dt, friction=args.friction, optimize_endpoints=args.optimize_endpoints)

    me = neb.splineMEProfile()
    mep = neb.splineMEPath()
